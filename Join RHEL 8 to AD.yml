# This playbook was written and developed by Oslitandi Tech LLC.
# For all questions, please forward them to ot@oslitanditech.com.

- name: Join Red Hat 8 Server to Active Directory
  hosts: "{{ hosts }}"
  become: yes
  vars:
    domain: "{{ domain }}"
    ad_domain: "{{ ad_domain }}"
    ad_user: "{{ lookup('env', 'DOMAIN_JOIN_USER') }}"
    ad_password: "{{ lookup('env', 'DOMAIN_JOIN_PASSWORD') }}"
    krb5_config_path: "/etc/krb5.conf"
    sudoers_file_path: "/etc/sudoers"
    nsswitch_conf_path: "/etc/nsswitch.conf"
    password_auth_path: "/etc/pam.d/password-auth"
    system_auth_path: "/etc/pam.d/system-auth"
  
  tasks:
    - name: Install required packages
      yum:
        name:
          - adcli
          - sssd
          - realmd
          - authselect
          - oddjob
          - oddjob-mkhomedir
        state: present

    - name: Backup krb5.conf
      copy:
        src: "{{ krb5_config_path }}"
        dest: "{{ krb5_config_path }}.backup"
        remote_src: yes

    - name: Backup sudoers file
      copy:
        src: "{{ sudoers_file_path }}"
        dest: "{{ sudoers_file_path }}.backup"
        remote_src: yes

    - name: Backup nsswitch.conf
      copy:
        src: "{{ nsswitch_conf_path }}"
        dest: "{{ nsswitch_conf_path }}.backup"
        remote_src: yes

    - name: Backup password-auth
      copy:
        src: "{{ password_auth_path }}"
        dest: "{{ password_auth_path }}.backup"
        remote_src: yes

    - name: Backup system-auth
      copy:
        src: "{{ system_auth_path }}"
        dest: "{{ system_auth_path }}.backup"
        remote_src: yes

    - name: Configure krb5.conf
      copy:
        dest: "{{ krb5_config_path }}"
        content: |
          [logging]
          default = FILE:/var/log/krb5libs.log
          kdc = FILE:/var/log/krb5kdc.log
          admin_server = FILE:/var/log/kadmind.log

          [libdefaults]
          default_realm = {{ domain | upper }}
          dns_lookup_realm = true
          dns_lookup_kdc = true

          [realms]
          {{ domain | upper }} = {
            kdc = {{ ad_domain }}
            admin_server = {{ ad_domain }}
          }

          [domain_realm]
          .{{ domain }} = {{ domain | upper }}
          {{ domain }} = {{ domain | upper }}                    

    - name: Check FIPS mode status
      command: cat /proc/sys/crypto/fips_enabled
      register: fipscheck_result
      ignore_errors: yes
    
    - name: Display FIPS check result
      debug:
        msg: "FIPS check result: {{ fipscheck_result.stdout }}"
    
    - name: Enable FIPS mode if not enabled
      command: fips-mode-setup --enable
      when: fipscheck_result.stdout | trim != "1"
      register: fips_enable_result
      async: 0
      poll: 0

    - name: Wait for FIPS mode enablement
      async_status:
        jid: "{{ fips_enable_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 10
      when: fipscheck_result.stdout | trim != "1"

    - name: Reboot the server if FIPS mode was enabled
      reboot:
      when: fipscheck_result.stdout | trim != "1"

    - name: Wait for server to come back online
      wait_for_connection:
        timeout: 300
      when: fipscheck_result.stdout | trim != "1"

    - name: Check FIPS mode status again
      command: cat /proc/sys/crypto/fips_enabled
      register: fipscheck_result_after
      ignore_errors: yes
    
    - name: Display FIPS check result after enabling
      debug:
        msg: "FIPS check result after enabling: {{ fipscheck_result_after.stdout }}"

    - name: Fail if FIPS mode is still not enabled
      fail:
        msg: "FIPS mode is not enabled. FIPS check result after enabling: {{ fipscheck_result_after.stdout }}"
      when: fipscheck_result_after.stdout | trim != "1"

    - name: Check DNS resolution for the AD domain
      command: nslookup {{ ad_domain }}
      register: nslookup_result
      ignore_errors: yes

    - name: Fail if DNS resolution fails
      fail:
        msg: "DNS resolution for the AD domain failed: {{ nslookup_result.stderr }}"
      when: nslookup_result.rc != 0
      ignore_errors: yes

    - name: Discover the AD domain
      command: realm discover {{ ad_domain }}
      register: realm_discover_result
      ignore_errors: yes

    - name: Fail if realm discover fails
      fail:
        msg: "Unable to discover the AD domain: {{ realm_discover_result.stderr }}"
      when: realm_discover_result.rc != 0

    - name: Join the AD domain
      expect:
        command: realm join -U {{ ad_user }} {{ ad_domain }}
        responses:
          Password for *: "{{ ad_password }}"
      register: join_result
      timeout: 120  # Increase the timeout to 120 seconds

    - name: Enable and start SSSD service
      systemd:
        name: sssd
        enabled: yes
        state: started

    - name: Enable and start oddjobd service
      systemd:
        name: oddjobd
        enabled: yes
        state: started

    - name: Configure authselect for AD
      command: authselect select sssd with-mkhomedir --force

    - name: Update crypto policies
      command: update-crypto-policies --set DEFAULT:AD-SUPPORT

    - name: Configure sudoers for temp-sudo-group
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%temp-sudo-group'
        line: '%temp-sudo-group ALL=(ALL) ALL'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Check the realm list result for domain name
      command: realm list
      register: realm_list_result
      ignore_errors: yes

    - name: Validate if bizzy-lab.com is in realm list
      command: grep 'bizzy-lab.com'
      args:
        stdin: "{{ realm_list_result.stdout }}"
      register: domain_name_result
      changed_when: false
      failed_when: domain_name_result.rc != 0

    - name: Check the /etc/sssd/sssd.conf file for domain configuration
      command: grep 'bizzy-lab.com' /etc/sssd/sssd.conf
      register: sssd_conf_result
      ignore_errors: yes

    - name: Validate the /etc/sssd/sssd.conf file for domain configuration
      command: grep 'bizzy-lab.com'
      args:
        stdin: "{{ sssd_conf_result.stdout }}"
      register: sssd_conf_result_validation
      changed_when: false
      failed_when: sssd_conf_result_validation.rc != 0

    - name: Recommendations
      debug:
        msg: |
          It is recommended to reboot the server to apply all changes.
          Additionally, check if user accounts work by switching to a domain user.
          For example, su jthompson@bizzy-lab.com from terminal.
          Once logged in, type ls -las /home.
          You should see the home directory for the domain user.
